.. _pydoc-tool:

=============
pydoc-tool.py
=============

Usage
-----

::

    Usage: pydoc-tool COMMAND [options] [ARGS...]
    
    Getting Python docstring to XML from sources, and vice versa.
    
    Commands:
    
    collect MODULENAMES... > docs.xml
        Dump docstrings from named modules.
    
    mangle -i docs.xml > docs2.xml
        Mangle entries so that they appear to originate from the topmost
        module they were imported into.
    
    prune -i docs.xml > docs2.xml
        Prune entries that are not listed in __all__ or whose name begins with
        an underscore.
    
    list -i docs.xml
        List docstrings in the dump
    
    numpy-docs -i docs.xml > docs2.xml
        Get source line information for docstrings added by numpy.add_newdoc
        function calls.
    
    pyrex-docs -i docs.xml > docs2.xml
        Get source line information from Pyrex source files.
    
    sphinx-docs -n NAME -e .rst PATH -i docs.xml > docs2.xml
        Get documentation from files in a Sphinx documentation tree, looking
        for files recursively in PATH.
    
    patch OLD.XML NEW.XML > patch
        Generate a patch that updates docstrings in the source files
        corresponding to OLD.XML to the docstrings in NEW.XML
    
    bzr OLD.XML NEW.XML PATH
        Commit changes to bzr checkout in a given PATH, one commit per
        docstring. The code for the module is assumed to be in PATH/modulename
        IMPORTANT NOTE:      OLD.XML must be generated by pydoc_moin collect
        from a compiled     version of the sources in PATH, otherwise the
        sources in PATH     will be overwritten by old files.
    
    Options:
      -h, --help  show this help message and exit
    

Examples
--------

See ``modules/pull-*.sh`` for several example pull scripts.
